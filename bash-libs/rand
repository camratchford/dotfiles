#!/bin/bash

function rand-b64 {
  local HELP=$(cat <<EOF
Prints a random integer between a min and max integer

Usage:
    rand-b64 SIZE_INT
    rand-b64 -h

Options:
    -h       Print this message and exits

Arguments:
    SIZE_INT The bit length of the b64-encoded integer you wish to generate
             (Defaults to 16 if no arguments are passed)

Examples:
    rand-b64
    > buyL55f4qGne+XqpqsnaUA

    rand-b64 64
    > 81YJCeyUYQthGARxX5EJFoNIs+pZUgvQimmyeMS5mCCqGkXZBkF38sdfsn88OtUtmev2pCcpuVrlx6J48bdi3Q

EOF
)

  while getopts :h: flag
  do
    case "${flag}" in
      h | *) echo $HELP; exit 0;;
    esac
  done

  local NUM_LEN=$1
  if ! [ -n "$1" ]; then
    NUM_LEN=16
  fi
  local RESULT="$(dd if=/dev/urandom status=none count=1 bs=$NUM_LEN | base64 -w 0 | tr -d '=')"
  echo "$RESULT"

}


function rand-int {

  local HELP=$(cat <<EOF
Prints a random integer between a min and max integer

Usage:
    rand-int MIN_INT MAX_INT
    rand-int MAX_INT
    rand-int -h

Options:
    -h       Print this message and exits

Arguments:
    MIN_INT  The lowest possible value that the random number can be (inclusive)
             (Defaults to 0 if only 1 arg (MAX_INT) is passed)

    MAX_INT  The highest possible value plus one that the random number can be (exclusive)
             (Is the 2nd argument if 2 args are passed, is the 1st argument if only 1 arg is passed)

Examples:
    # Produces a random integer in the range of 10 to 100
    rand_int 10 101
    > 28
    # Produces a random integer in the range of 0 to 9
    rand_int 10
    > 9

EOF
)

  if [[ $# -eq 0 ]]; then
    echo $HELP
    exit
  fi

  while getopts :h: flag
  do
    case "${flag}" in
      h | *) help; exit 0;;
    esac
  done

  local MIN_NUM=$1
  local MAX_NUM=$2
  if ! [ $2 ]; then
    MIN_NUM=0
    MAX_NUM=$1
  fi

  local B64_NUM="$(rand-b64 16)"

  local INT_NUM=$(echo $B64_NUM | hexdump -v -e '/8 "0x%04x\n"' | xargs printf "%d\n" | head -n 1)
  echo "$MIN_NUM + $INT_NUM % ($MAX_NUM - $MIN_NUM)" | bc
}
