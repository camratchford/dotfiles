#!/bin/bash

#
# Bash functions to be imported via ~/.bashrc
# They get their own file so we can track them seperately
#

# Executes the shell code from a URL in BASH
# Args:
#   $1 = URL
#
function execurl() {
  bash <(curl -s $1)
}

# Scrubs the ~/.ssh/known_hosts file of any fingerprints assoicated to the hostname provided
# Will check DNS hostname, IPv4, IPv6 for associated known_host entries
# Args:
#   $1 = hostname (or IP)
#

function newsshhost() {
  ssh-keygen -f ~/.ssh/known_hosts -R $1
  ip=$(grep $1 /etc/hosts | awk '{print $1}')
  if [[ -n $ip ]]; then
    ssh-keygen -f ~/.ssh/known_hosts -R $ip
  fi
  ip=$(dig -t a +short $1)
  if [[ -n $ip ]]; then
    ssh-keygen -f ~/.ssh/known_hosts -R $ip
  fi
  ip=$(dig -t aaaa +short $1)
  if [[ -n $ip ]]; then
    ssh-keygen -f ~/.ssh/known_hosts -R $ip
  fi
  ssh-keyscan -t ecdsa $1 >> ~/.ssh/known_hosts
}

# Logs the text to stderr, formatted with the date.
# Args:
#   $* = Error Message
#

function err() {
  err_format="[$(date +'%Y-%m-%dT%H:%M:%S%z')]:"
  ansi --red "${err_format} $*" >&2
}

function logcmdexec() {
    CMD="$1"
    ERR="$(exec $CMD 2>&1 > /dev/null)"
    if [ $? != "0" ]; then
        /usr/bin/logger -t ERROR -i "$SCRIPT_NAME : $ERR"
        /usr/bin/logger -t ERROR -i "$SCRIPT_NAME : $CMD"
    fi
}
